// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  type          String          @default("student")
  class         Class?          @relation("student", fields: [classId], references: [id])
  password      String
  salt          String
  classId       String?
  ClassAndOwner ClassAndOwner[]
  Token         Token[]
  work          Work[]
  Proficiency   Proficiency[]
}

model Proficiency {
  genId     String   @id @default(uuid())
  id        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Int
  gradient  Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Work {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  progress Int    @default(0)
  userId   String
  status   String @default("incomplete")

  subTopics String

  questionMax Int

  breaksAllowed Boolean
  reviewAfter   Boolean

  onBreak          Boolean
  startTime        DateTime?
  endTime          DateTime?
  currentQuestion  Int
  questionsCorrect Int
  cheating         Boolean   @default(false)

  user     User    @relation(fields: [userId], references: [id])
  sendTo   Class?  @relation(fields: [sendtoId], references: [id])
  sendtoId String?
}

model Token {
  token  String  @id
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Class {
  id              String        @id @default(uuid())
  name            String
  classCode       String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  students        User[]        @relation("student")
  classAndOwner   ClassAndOwner @relation(fields: [classAndOwnerId], references: [id])
  classAndOwnerId String        @unique
  Work            Work[]
}

model ClassAndOwner {
  id        String @id @default(uuid())
  class     Class?
  teacher   User   @relation(fields: [teacherId], references: [id])
  teacherId String
}
